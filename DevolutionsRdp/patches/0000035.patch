diff --git a/libfreerdp/gdi/gdi.c b/libfreerdp/gdi/gdi.c
index b624e1174..b4a8593fc 100644
--- a/libfreerdp/gdi/gdi.c
+++ b/libfreerdp/gdi/gdi.c
@@ -1251,9 +1251,11 @@ BOOL gdi_init(freerdp* instance, UINT32 format)
 BOOL gdi_init_ex(freerdp* instance, UINT32 format, UINT32 stride, BYTE* buffer,
                  void (*pfree)(void*))
 {
+	UINT32 flags;
 	UINT32 SrcFormat = gdi_get_pixel_format(instance->settings->ColorDepth);
 	rdpGdi* gdi = (rdpGdi*)calloc(1, sizeof(rdpGdi));
 	rdpContext* context = instance->context;
+	rdpSettings* settings = instance->settings;
 
 	if (!gdi)
 		goto fail;
diff --git a/winpr/libwinpr/utils/wlog/wlog.c b/winpr/libwinpr/utils/wlog/wlog.c
index fbffaa706..915ab800d 100644
--- a/winpr/libwinpr/utils/wlog/wlog.c
+++ b/winpr/libwinpr/utils/wlog/wlog.c
@@ -28,6 +28,7 @@
 #include <winpr/print.h>
 #include <winpr/debug.h>
 #include <winpr/environment.h>
+#include <winpr/wlog.h>
 
 #if defined(ANDROID)
 #include <android/log.h>
@@ -36,7 +37,6 @@
 
 #include "wlog.h"
 
-
 struct _wLogFilter
 {
 	DWORD Level;
@@ -61,7 +61,10 @@ LPCSTR WLOG_LEVELS[7] = { "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "O
 
 static DWORD g_FilterCount = 0;
 static wLogFilter* g_Filters = NULL;
+static wLog* g_RootLog = NULL;
 
+static wLog* WLog_New(LPCSTR name, wLog* rootLogger);
+static void WLog_Free(wLog* log);
 static LONG WLog_GetFilterLogLevel(wLog* log);
 static int WLog_ParseLogLevel(LPCSTR level);
 static BOOL WLog_ParseFilter(wLogFilter* filter, LPCSTR name);
@@ -157,7 +160,8 @@ fail:
 
 static BOOL log_recursion(LPCSTR file, LPCSTR fkt, int line)
 {
-	char** msg;
+	BOOL status = FALSE;
+	char** msg = NULL;
 	size_t used, i;
 	void* bt = winpr_backtrace(20);
 #if defined(ANDROID)
@@ -170,37 +174,49 @@ static BOOL log_recursion(LPCSTR file, LPCSTR fkt, int line)
 	msg = winpr_backtrace_symbols(bt, &used);
 
 	if (!msg)
-		return FALSE;
+		goto out;
 
 #if defined(ANDROID)
 
 	if (__android_log_print(ANDROID_LOG_FATAL, tag, "Recursion detected!!!") < 0)
-		return FALSE;
+		goto out;
 
 	if (__android_log_print(ANDROID_LOG_FATAL, tag, "Check %s [%s:%d]", fkt, file,
 	                        line) < 0)
-		return FALSE;
+		goto out;
 
 	for (i = 0; i < used; i++)
 		if (__android_log_print(ANDROID_LOG_FATAL, tag, "%zd: %s", i, msg[i]) < 0)
-			return FALSE;
+			goto out;
 
 #else
 
 	if (fprintf(stderr, "[%s]: Recursion detected!\n", fkt) < 0)
-		return FALSE;
+		goto out;
 
 	if (fprintf(stderr, "[%s]: Check %s:%d\n", fkt, file, line) < 0)
-		return FALSE;
+		goto out;
 
 	for (i = 0; i < used; i++)
 		if (fprintf(stderr, "%s: %"PRIuz": %s\n", fkt, i, msg[i]) < 0)
-			return FALSE;
+			goto out;
 
 #endif
+	status = TRUE;
+out:
 	free(msg);
 	winpr_backtrace_free(bt);
-	return TRUE;
+	return status;
+}
+
+void WLog_Lock(wLog* log)
+{
+	EnterCriticalSection(&log->lock);
+}
+
+void WLog_Unlock(wLog* log)
+{
+	LeaveCriticalSection(&log->lock);
 }
 
 BOOL WLog_Write(wLog* log, wLogMessage* message)
@@ -234,7 +250,7 @@ BOOL WLog_Write(wLog* log, wLogMessage* message)
 	return status;
 }
 
-BOOL WLog_WriteData(wLog* log, wLogMessage* message)
+static BOOL WLog_WriteData(wLog* log, wLogMessage* message)
 {
 	BOOL status;
 	wLogAppender* appender;
@@ -265,7 +281,7 @@ BOOL WLog_WriteData(wLog* log, wLogMessage* message)
 	return status;
 }
 
-BOOL WLog_WriteImage(wLog* log, wLogMessage* message)
+static BOOL WLog_WriteImage(wLog* log, wLogMessage* message)
 {
 	BOOL status;
 	wLogAppender* appender;
@@ -296,7 +312,7 @@ BOOL WLog_WriteImage(wLog* log, wLogMessage* message)
 	return status;
 }
 
-BOOL WLog_WritePacket(wLog* log, wLogMessage* message)
+static BOOL WLog_WritePacket(wLog* log, wLogMessage* message)
 {
 	BOOL status;
 	wLogAppender* appender;
@@ -707,6 +723,7 @@ BOOL WLog_ParseFilters(void)
 
 	if (GetEnvironmentVariableA(filter, env, nSize) == nSize - 1)
 		res = WLog_AddStringLogFilters(env);
+
 	free(env);
 	return res;
 }
@@ -754,7 +771,7 @@ LONG WLog_GetFilterLogLevel(wLog* log)
 	return log->FilterLevel;
 }
 
-BOOL WLog_ParseName(wLog* log, LPCSTR name)
+static BOOL WLog_ParseName(wLog* log, LPCSTR name)
 {
 	char* p;
 	int count;
@@ -836,7 +853,6 @@ wLog* WLog_New(LPCSTR name, wLog* rootLogger)
 	else
 	{
 		LPCSTR level = "WLOG_LEVEL";
-
 		log->Level = WLOG_INFO;
 		nSize = GetEnvironmentVariableA(level, NULL, 0);
 
@@ -873,6 +889,8 @@ wLog* WLog_New(LPCSTR name, wLog* rootLogger)
 			goto out_fail;
 	}
 
+	InitializeCriticalSectionAndSpinCount(&log->lock, 4000);
+
 	return log;
 out_fail:
 	free(log->Children);
@@ -895,12 +913,13 @@ void WLog_Free(wLog* log)
 		free(log->Names[0]);
 		free(log->Names);
 		free(log->Children);
+
+		DeleteCriticalSection(&log->lock);
+
 		free(log);
 	}
 }
 
-static wLog* g_RootLog = NULL;
-
 wLog* WLog_GetRoot(void)
 {
 	char* env;
@@ -967,8 +986,12 @@ fail:
 	return NULL;
 }
 
-BOOL WLog_AddChild(wLog* parent, wLog* child)
+static BOOL WLog_AddChild(wLog* parent, wLog* child)
 {
+	BOOL status = FALSE;
+
+	WLog_Lock(parent);
+
 	if (parent->ChildrenCount >= parent->ChildrenSize)
 	{
 		wLog** tmp;
@@ -991,7 +1014,7 @@ BOOL WLog_AddChild(wLog* parent, wLog* child)
 					free(parent->Children);
 
 				parent->Children = NULL;
-				return FALSE;
+				goto exit;
 			}
 
 			parent->Children = tmp;
@@ -999,14 +1022,19 @@ BOOL WLog_AddChild(wLog* parent, wLog* child)
 	}
 
 	if (!parent->Children)
-		return FALSE;
+		goto exit;
 
 	parent->Children[parent->ChildrenCount++] = child;
 	child->Parent = parent;
-	return TRUE;
+
+	WLog_Unlock(parent);
+
+	status = TRUE;
+exit:
+	return status;
 }
 
-wLog* WLog_FindChild(LPCSTR name)
+static wLog* WLog_FindChild(LPCSTR name)
 {
 	DWORD index;
 	wLog* root;
@@ -1017,6 +1045,8 @@ wLog* WLog_FindChild(LPCSTR name)
 	if (!root)
 		return NULL;
 
+	WLog_Lock(root);
+
 	for (index = 0; index < root->ChildrenCount; index++)
 	{
 		child = root->Children[index];
@@ -1028,6 +1058,8 @@ wLog* WLog_FindChild(LPCSTR name)
 		}
 	}
 
+	WLog_Unlock(root);
+
 	return (found) ? child : NULL;
 }
 
@@ -1084,3 +1116,4 @@ BOOL WLog_Uninit(void)
 
 	return TRUE;
 }
+
