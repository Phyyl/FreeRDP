diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6c20267f4..312081bfe 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -72,7 +72,6 @@ include(GNUInstallDirsWrapper)
 include(CMakePackageConfigHelpers)
 include(InstallFreeRDPMan)
 include(GetGitRevisionDescription)
 
 # Soname versioning
 set(BUILD_NUMBER 0)
@@ -213,6 +212,10 @@ if(FREEBSD)
 	find_library(EPOLLSHIM_LIBS NAMES epoll-shim libepoll-shim HINTS /usr/local/lib)
 endif()
 
+if(WINPR_MONO_CONFLICT)
+	add_definitions(-DWINPR_MONO_CONFLICT)
+endif()
+
 # Configure MSVC Runtime
 if(MSVC)
 	include(MSVCRuntime)
@@ -234,8 +237,8 @@ if(MSVC)
 	endif()
 endif()
 
-# Enable 64bit file support on linux and FreeBSD.
-if("${CMAKE_SYSTEM_NAME}" MATCHES "Linux" OR FREEBSD)
+# Enable 64bit file support on linux.
+if("${CMAKE_SYSTEM_NAME}" MATCHES "Linux")
 	add_definitions("-D_FILE_OFFSET_BITS=64")
 endif()
 
@@ -343,104 +346,62 @@ endif()
 
 # Enable address sanitizer, where supported and when required
 if(${CMAKE_C_COMPILER_ID} STREQUAL "Clang" OR CMAKE_COMPILER_IS_GNUCC)
-	set(CMAKE_REQUIRED_FLAGS_SAVED ${CMAKE_REQUIRED_FLAGS})
-
-	CHECK_C_COMPILER_FLAG ("-fno-omit-frame-pointer" fno-omit-frame-pointer)
-
-	file(WRITE ${CMAKE_BINARY_DIR}/foo.txt "")
 	if(WITH_SANITIZE_ADDRESS)
+		if (DEFINED CMAKE_REQUIRED_FLAGS)
+			set(SAVE_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})
+		endif()
 		set(CMAKE_REQUIRED_FLAGS "-fsanitize=address")
 		CHECK_C_COMPILER_FLAG ("-fsanitize=address" fsanitize-address)
-		CHECK_C_COMPILER_FLAG ("-fsanitize-blacklist=${CMAKE_BINARY_DIR}/foo.txt" fsanitize-blacklist)
-		CHECK_C_COMPILER_FLAG ("-fsanitize-address-use-after-scope" fsanitize-address-use-after-scope)
-		unset(CMAKE_REQUIRED_FLAGS)
-
 		if(fsanitize-address)
 			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=address")
-			set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=address")
-			set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address")
-
-			if(fsanitize-blacklist)
-				set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize-blacklist=${CMAKE_SOURCE_DIR}/scripts/blacklist-address-sanitizer.txt")
-			endif(fsanitize-blacklist)
-
-			if(fsanitize-address-use-after-scope)
-				set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize-address-use-after-scope")
-			endif(fsanitize-address-use-after-scope)
-
-		else(fsanitize-address)
-            message(WARNING "Missing support for address sanitizer!")
-		endif(fsanitize-address)
-
-		if(fno-omit-frame-pointer)
-			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-omit-frame-pointer")
 		endif()
-	elseif(WITH_SANITIZE_MEMORY)
-		set(CMAKE_REQUIRED_FLAGS "-fsanitize=memory")
-		CHECK_C_COMPILER_FLAG ("-fsanitize=memory" fsanitize-memory)
-		CHECK_C_COMPILER_FLAG ("-fsanitize-blacklist=${CMAKE_BINARY_DIR}/foo.txt" fsanitize-blacklist)
-		CHECK_C_COMPILER_FLAG ("-fsanitize-memory-use-after-dtor" fsanitize-memory-use-after-dtor)
-		CHECK_C_COMPILER_FLAG ("-fsanitize-memory-track-origins" fsanitize-memory-track-origins)
-		unset(CMAKE_REQUIRED_FLAGS)
-
-		if(fsanitize-memory)
-			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=memory")
-			set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=memory")
-			set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=memory")
-
-			if(fsanitize-blacklist)
-				set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize-blacklist=${CMAKE_SOURCE_DIR}/scripts/blacklist-memory-sanitizer.txt")
-			endif(fsanitize-blacklist)
-
-			if (fsanitize-memory-use-after-dtor)
-				set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize-memory-use-after-dtor")
-			endif(fsanitize-memory-use-after-dtor)
-
-			if (fsanitize-memory-track-origins)
-				set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize-memory-track-origins")
-			endif(fsanitize-memory-track-origins)
-
-		else(fsanitize-memory)
-            message(WARNING "Missing support for memory sanitizer!")
-		endif(fsanitize-memory)
+		if (DEFINED SAVE_CMAKE_REQUIRED_FLAGS)
+			set(CMAKE_REQUIRED_FLAGS ${SAVE_CMAKE_REQUIRED_FLAGS})
+		else()
+			unset(CMAKE_REQUIRED_FLAGS)
+		endif()
 
+		CHECK_C_COMPILER_FLAG ("-fno-omit-frame-pointer" fno-omit-frame-pointer)
 		if(fno-omit-frame-pointer)
 			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-omit-frame-pointer")
 		endif()
-	elseif(WITH_SANITIZE_THREAD)
-		CHECK_C_COMPILER_FLAG ("-fsanitize=thread" fsanitize-thread)
-		CHECK_C_COMPILER_FLAG ("-fsanitize-blacklist=${CMAKE_BINARY_DIR}/foo.txt" fsanitize-blacklist)
-		unset(CMAKE_REQUIRED_FLAGS)
-		if(fsanitize-thread)
-			set(CMAKE_REQUIRED_FLAGS "-Werror -fsanitize=thread")
-			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=thread")
-			if(fsanitize-blacklist)
-				set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize-blacklist=${CMAKE_SOURCE_DIR}/scripts/blacklist-thread-sanitizer.txt")
-			endif(fsanitize-blacklist)
-			set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=thread")
-			set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=thread")
-		else(fsanitize-thread)
-            message(WARNING "Missing support for thread sanitizer!")
-		endif(fsanitize-thread)
+	elseif(WITH_SANITIZE_LEAK)
+		if (DEFINED CMAKE_REQUIRED_FLAGS)
+			set(SAVE_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})
+		endif()
+		set(CMAKE_REQUIRED_FLAGS "-fsanitize=leak")
+		CHECK_C_COMPILER_FLAG ("-fsanitize=leak" fsanitize-leak)
+		if(fsanitize-leak)
+			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=leak")
+		endif()
+		if (DEFINED SAVE_CMAKE_REQUIRED_FLAGS)
+			set(CMAKE_REQUIRED_FLAGS ${SAVE_CMAKE_REQUIRED_FLAGS})
+		else()
+			unset(CMAKE_REQUIRED_FLAGS)
+		endif()
 
+		CHECK_C_COMPILER_FLAG ("-fno-omit-frame-pointer" fno-omit-frame-pointer)
 		if(fno-omit-frame-pointer)
 			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-omit-frame-pointer")
 		endif()
 	endif()
 
-	file(REMOVE ${CMAKE_BINARY_DIR}/foo.txt)
-
 	if (WITH_NO_UNDEFINED)
+		if (DEFINED CMAKE_REQUIRED_FLAGS)
+			set(SAVE_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})
+		endif()
 		set(CMAKE_REQUIRED_FLAGS "-Wl,--no-undefined")
 		CHECK_C_COMPILER_FLAG (-Wl,--no-undefined no-undefined)
-		unset(CMAKE_REQUIRED_FLAGS)
-
+		if (DEFINED SAVE_CMAKE_REQUIRED_FLAGS)
+			set(CMAKE_REQUIRED_FLAGS ${SAVE_CMAKE_REQUIRED_FLAGS})
+			unset(SAVE_CMAKE_REQUIRED_FLAGS)
+		else()
+			unset(CMAKE_REQUIRED_FLAGS)
+		endif()
 		if(no-undefined)
 			SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined" )
 		endif()
 	endif()
-
-	set(CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS_SAVED})
 endif()
 
 if(MSVC)
@@ -491,7 +452,7 @@ if(WIN32)
 	elseif (${CMAKE_GENERATOR} MATCHES "Visual Studio*")
 		set(CMAKE_PDB_BINARY_DIR "${CMAKE_BINARY_DIR}/\${CMAKE_INSTALL_CONFIG_NAME}")
 	else()
-		message(FATAL_ERROR "Unknown generator ${CMAKE_GENERATOR}")
+		message(FATAL "Unknown generator ${CMAKE_GENERATOR}")
 	endif()
 
 	string(TIMESTAMP RC_VERSION_YEAR "%Y")
@@ -564,6 +525,11 @@ if(APPLE)
 		if(NOT DEFINED CMAKE_OSX_ARCHITECTURES)
 			set(CMAKE_OSX_ARCHITECTURES i386 x86_64)
 		endif()
+
+		if(IS_DIRECTORY /opt/local/include)
+			include_directories(/opt/local/include)
+			link_directories(/opt/local/lib)
+		endif()
 	endif(IOS)
 
 # Temporarily disabled, causes the cmake script to be reexecuted, causing the compilation to fail.
@@ -658,13 +624,7 @@ if(UNIX OR CYGWIN)
 	if (HAVE_SYS_EVENTFD_H)
 		check_symbol_exists(eventfd_read sys/eventfd.h WITH_EVENTFD_READ_WRITE)
 	endif()
-	if (FREEBSD)
-		list(APPEND CMAKE_REQUIRED_INCLUDES ${EPOLLSHIM_INCLUDE_DIR})
-	endif()
 	check_include_files(sys/timerfd.h HAVE_SYS_TIMERFD_H)
-	if (FREEBSD)
-		list(REMOVE_ITEM CMAKE_REQUIRED_INCLUDES ${EPOLLSHIM_INCLUDE_DIR})
-	endif()
 	check_include_files(poll.h HAVE_POLL_H)
 	list(APPEND CMAKE_REQUIRED_LIBRARIES m)
 	check_symbol_exists(ceill math.h HAVE_MATH_C99_LONG_DOUBLE)
@@ -923,7 +883,7 @@ set(WITH_OPENH264 ${OPENH264_FOUND})
 if ( (WITH_GSSAPI) AND (NOT GSS_FOUND))
 	message(WARNING "-DWITH_GSSAPI=ON is set, but not GSSAPI implementation was found, disabling")
 elseif(WITH_GSSAPI)
-	if(GSS_FLAVOUR STREQUAL "MIT")
+	if(GSS_FLAVOUR STREQUAL "MIT") 
 		add_definitions("-DWITH_GSSAPI -DWITH_GSSAPI_MIT")
 		if(GSS_VERSION_1_13)
 			add_definitions("-DHAVE_AT_LEAST_KRB_V1_13")
@@ -999,9 +959,7 @@ if (APPLE)
 	set(CMAKE_INSTALL_RPATH "@loader_path/../Frameworks")
 else (APPLE)
 	set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
-	if (NOT FREEBSD)
-		set(CMAKE_INSTALL_RPATH "\$ORIGIN/../${CMAKE_INSTALL_LIBDIR}:\$ORIGIN/..")
-	endif()
+	set(CMAKE_INSTALL_RPATH "\$ORIGIN/../${CMAKE_INSTALL_LIBDIR}:\$ORIGIN/..")
 endif(APPLE)
 
 if (BUILD_SHARED_LIBS)
diff --git a/winpr/include/winpr/interlocked.h b/winpr/include/winpr/interlocked.h
index 5be208598..3141a34bb 100644
--- a/winpr/include/winpr/interlocked.h
+++ b/winpr/include/winpr/interlocked.h
@@ -25,6 +25,10 @@
 #include <winpr/wtypes.h>
 #include <winpr/platform.h>
 
+#ifdef WINPR_MONO_CONFLICT
+#define InterlockedCompareExchange64 winpr_InterlockedCompareExchange64
+#endif
+
 #ifdef __cplusplus
 extern "C"
 {
diff --git a/winpr/include/winpr/winsock.h b/winpr/include/winpr/winsock.h
index 167760920..40053b60d 100644
--- a/winpr/include/winpr/winsock.h
+++ b/winpr/include/winpr/winsock.h
@@ -24,6 +24,10 @@
 #include <winpr/wtypes.h>
 #include <winpr/windows.h>
 
+#ifdef WINPR_MONO_CONFLICT
+#define closesocket winpr_closesocket
+#endif
+
 #ifdef _WIN32
 
 #define _accept accept
